{
	"info": {
		"_postman_id": "55e6c7be-2169-4c59-979a-50a74d11689f",
		"name": "Belajar Membuat Aplikasi Back-End untuk Pemula",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24635335"
	},
	"item": [
		{
			"name": "Webserver",
			"item": [
				{
					"name": "Membuat HTTP Server",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"daffa\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:5000/about",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"about"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Hapi",
			"item": [
				{
					"name": "index",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								""
							],
							"query": [
								{
									"key": "name",
									"value": "daffa",
									"disabled": true
								},
								{
									"key": "location",
									"value": "timur",
									"disabled": true
								},
								{
									"key": "lang",
									"value": "id",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Hapi Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/users/daffa",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								"daffa"
							],
							"query": [
								{
									"key": "name",
									"value": "daffa",
									"disabled": true
								},
								{
									"key": "location",
									"value": "timur",
									"disabled": true
								},
								{
									"key": "lang",
									"value": "id",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"daffa\", \"password\": \"encryptedpassword\" }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:5000/login",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notes",
			"item": [
				{
					"name": "Add Notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"    pm.response.to.have.status(201)\r",
									"})\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
									"})\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    \r",
									"    pm.expect(responseJson).to.be.an('object')\r",
									"})\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json()\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('status')\r",
									"    pm.expect(responseJson.status).to.equals('success')\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message')\r",
									"    pm.expect(responseJson.message).to.equals('Catatan Berhasil ditambahkan')\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('data')\r",
									"    pm.expect(responseJson.data).to.be.an('object')\r",
									"})\r",
									"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const { data } = responseJson;\r",
									" \r",
									"    pm.expect(data).to.ownProperty('noteId');\r",
									"    pm.expect(data.noteId).to.not.equals('');\r",
									" \r",
									"    pm.environment.set('noteId', data.noteId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"333\",\r\n    \"tags\": [\r\n        \"bbb\",\r\n        \"ccc\"\r\n    ],\r\n    \"body\": \"aaa\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:5000/notes",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
									"})\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    \r",
									"    pm.expect(responseJson).to.be.an('object')\r",
									"})\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json()\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('status')\r",
									"    pm.expect(responseJson.status).to.equals('success')\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('data')\r",
									"    pm.expect(responseJson.status).to.equals('success')\r",
									"})\r",
									"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    const { data } = responseJson\r",
									"\r",
									"    pm.expect(data).to.have.ownProperty('notes')\r",
									"    pm.expect(data.notes).to.be.an('array')\r",
									"    pm.expect(data.notes).lengthOf.at.least(1)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/notes",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Note By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
									"})\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    \r",
									"    pm.expect(responseJson).to.be.an('object')\r",
									"})\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json()\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('status')\r",
									"    pm.expect(responseJson.status).to.equals('success')\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('data')\r",
									"    pm.expect(responseJson.status).to.equals('success')\r",
									"})\r",
									"pm.test('response body data contain note object', () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    const { data } = responseJson\r",
									"\r",
									"    pm.expect(data).to.have.ownProperty('note')\r",
									"    pm.expect(data.note).to.be.an('object')\r",
									"})\r",
									"pm.test('note object should contain correct value for id, title, body and tags property', () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    const { data: { note } } = responseJson\r",
									"\r",
									"    const expectedId = pm.environment.get('noteId')\r",
									"    const expectedTitle = '333'\r",
									"    const expectedTags = [\r",
									"        'bbb',\r",
									"        'ccc'\r",
									"    ]\r",
									"    const expectedBody = 'aaa'\r",
									"\r",
									"    pm.expect(note).to.haveOwnProperty('id')\r",
									"    pm.expect(note.id).to.equals(expectedId)\r",
									"\r",
									"    pm.expect(note).to.haveOwnProperty('title')\r",
									"    pm.expect(note.title).to.equals(expectedTitle)\r",
									"\r",
									"    pm.expect(note).to.haveOwnProperty('tags')\r",
									"    pm.expect(note.tags).to.eql(expectedTags)\r",
									"\r",
									"    pm.expect(note).to.haveOwnProperty('body')\r",
									"    pm.expect(note.body).to.equals(expectedBody)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:5000/notes/{{noteId}}",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 201 value', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
									"})\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    \r",
									"    pm.expect(responseJson).to.be.an('object')\r",
									"})\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json()\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('status')\r",
									"    pm.expect(responseJson.status).to.equals('success')\r",
									"\r",
									"    pm.expect(responseJson).to.ownProperty('message')\r",
									"    pm.expect(responseJson.message).to.equals('Catatan Berhasil diperbarui')\r",
									"})\r",
									"pm.test('when request the updated note', () => {\r",
									"    const noteId = pm.environment.get('noteId')\r",
									"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
									"        if(!error){\r",
									"            pm.test('then the updated note should contain the lastest data', () => {\r",
									"                const responseJson = response.json()\r",
									"                const { data: { note } } = responseJson\r",
									"                \r",
									"                const expectedTitle = '333d'\r",
									"                const expectedTags = [\"bbbd\",\"cccd\"]\r",
									"                const expectedBody = 'aaad'\r",
									"\r",
									"                pm.expect(note.title).to.equals(expectedTitle)\r",
									"                pm.expect(note.tags).to.eql(expectedTags)\r",
									"                pm.expect(note.body).to.equals(expectedBody)\r",
									"            })\r",
									"        }\r",
									"    })\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"333d\",\r\n    \"tags\": [\r\n        \"bbbd\",\r\n        \"cccd\"\r\n    ],\r\n    \"body\": \"aaad\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:5000/notes/{{noteId}}",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('response status code should have 200 value', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"})\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
									"})\r",
									"pm.test('response body should be an object', () => {\r",
									"    const responseJson = pm.response.json()\r",
									"    pm.expect(responseJson).to.be.an('object')\r",
									"})\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json()\r",
									"\r",
									"    pm.expect(responseJson).to.have.ownProperty('status')\r",
									"    pm.expect(responseJson.status).to.equals('success')\r",
									"\r",
									"    pm.expect(responseJson).to.have.ownProperty('message')\r",
									"    pm.expect(responseJson.message).to.equals('Catatan Berhasil dihapus')\r",
									"})\r",
									"pm.test('when request the deleted note', () => {\r",
									"    const noteId = pm.environment.get('noteId')\r",
									"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
									"        if(!error) {\r",
									"            pm.test('the deleted note should be not found', () => {\r",
									"                pm.expect(response.code).to.equals(404)\r",
									"\r",
									"                const responseJson = response.json()\r",
									"                pm.expect(responseJson.status).to.equals('fail')\r",
									"                pm.expect(responseJson.message).to.equals('Catatan Tidak ditemukan')\r",
									"            })\r",
									"        }\r",
									"    })\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:5000/notes/{{noteId}}",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}